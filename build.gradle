/*
 *  Copyright (c) 2019 Rumen Nikiforov <unafraid89@gmail.com>
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

plugins {
	id "com.github.unafraid.gradle.git-repo-plugin" version "2.0.4"
	id "de.sebastianboegl.shadow.transformer.log4j" version "2.1.0"
}

subprojects {
	apply plugin: "com.github.unafraid.gradle.git-repo-plugin"
	apply plugin: "de.sebastianboegl.shadow.transformer.log4j"
	apply plugin: "eclipse"
	apply plugin: "java"
	apply plugin: "maven"
	apply plugin: "maven-publish"
	apply plugin: "signing"
	apply plugin: "findbugs"

	sourceCompatibility = JavaVersion.VERSION_1_8

	gitPublishConfig {
		org = "UnAfraid"
		repo = "Plugins"
		branch = "releases"
	}

	group = "com.github.unafraid.plugins"
	version = "1.1.4"

	repositories {
		mavenCentral()
	}

	eclipse {
		project {
			natures("org.springsource.ide.eclipse.gradle.core.nature")
		}
	}

	findbugs {
		findbugsTest.enabled = false
	}

	tasks.withType(FindBugs) {
		reports {
			xml.enabled false
			html.enabled true
		}
		excludeFilter = file("$rootProject.projectDir/excludeFilter.xml")
	}

	tasks.eclipse.doLast {
		copy {
			from("../eclipse-settings")
			into(".settings")
		}
	}

	tasks.cleanEclipse.doLast {
		delete(".settings")
	}

	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}

	tasks.withType(Javadoc) {
		options.addStringOption("Xdoclint:none", "-quiet")
	}

	task javadocJar(type: Jar) {
		classifier = "javadoc"
		from javadoc
	}

	task sourcesJar(type: Jar) {
		classifier = "sources"
		from sourceSets.main.allSource
	}

	tasks.withType(Javadoc) {
		options.addStringOption("Xdoclint:none", "-quiet")
	}

	artifacts {
		archives javadocJar, sourcesJar
	}

	signing {
		required { gradle.taskGraph.hasTask("uploadArchives") }
		sign configurations.archives
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java

				artifact sourcesJar
			}
		}
		repositories {
			maven {
				url "file://${gitPublishConfig.home}/${gitPublishConfig.org}/${gitPublishConfig.repo}/releases"
			}
		}
	}

	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
					authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
				}

				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
					authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
				}

				pom.project {
					name project.name
					packaging "jar"
					description "Generic Plugins API"
					url "https://github.com/UnAfraid/Plugins"

					scm {
						connection "scm:git:git@github.com:UnAfraid/Plugins.git"
						developerConnection "scm:git:git@github.com:UnAfraid/Plugins.git"
						url "git@github.com:UnAfraid/Plugins.git"
					}

					licenses {
						license {
							name "MIT License"
							url "https://opensource.org/licenses/MIT"
							distribution "repo"
						}
					}

					developers {
						developer {
							id "UnAfraid"
							name "Rumen Nikiforov"
							email "unafraid89@gmail.com"
							organization "L2JUnity"
							organizationUrl "https://l2junity.org"
							roles {
								role "architect"
								role "developer"
							}
						}
					}
				}
			}
		}
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = "4.7"
}

def getRepositoryUsername() {
	return hasProperty("ossrhUsername") ? ossrhUsername : ""
}

def getRepositoryPassword() {
	return hasProperty("ossrhPassword") ? ossrhPassword : ""
}